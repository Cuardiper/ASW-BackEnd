openapi: 3.0.1
info:
  title: Issue Tracker
  description: >-
    This is a swagger file to test an Issue Tracker created with ruby on rails
    by Alejandra Volkova, Daniel Esquina, Alvaro Luque and Arthur Bernal in ASW
    course in FIB
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - url: 'https://calm-scrubland-98205.herokuapp.com'
tags:
  - name: User
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
  - name: Issue
    description: Everything about the issues
  - name: Comment
    description: Everything about the comments
  - name: Attachment
    description: Everything about the attachments
paths:
  /issues:
    get:
      tags:
        - Issue
      summary: Returns all the issues
      operationId: getIssues
      parameters:
        - name: direction
          in: query
          description: Sorting direction
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
        - name: sort
          in: query
          description: Sorting attribute
          required: false
          schema:
            type: string
            default: created_at
            enum:
              - id
              - type_issue
              - priority
              - status
              - votes
              - assignee_id
              - created_at
              - updated_at
        - name: priority[]
          in: query
          description: Priority filter
          required: false
          schema:
            type: string
            enum:
              - trivial
              - minor
              - major
              - critical
              - blocker
        - name: status[]
          in: query
          description: Status filter
          required: false
          schema:
            type: string
            enum:
              - new
              - open
              - on hold
              - resolved
              - duplicate
              - invalid
              - wontfix
              - closed
              - unresolved
        - name: type_issue[]
          in: query
          description: Type filter
          required: false
          schema:
            type: string
            enum:
              - bug
              - enhancement
              - task
              - proposal
        - name: assignee_id[]
          in: query
          description: Assignee filter
          required: false
          schema:
            type: integer
            format: int64
        - name: watching
          in: query
          description: Watching filter
          required: false
          schema:
            type: string
            enum:
              - watching
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Issue'
          links:
            self:
              description: >
                The `id` value returned in the response can be used as the `IssueId` parameter in `GET /issues/{IssueId}`.
              operationId: getIssuesById
              parameters: 
                IssueId: '$response.body#/id'  
            creator:
              description: >
                The `creator_id` value returned in the response can be used as the `UserId` parameter in `GET /users/{UserId}`.
              operationId: getUserByID
              parameters: 
                UserId: '$response.body#/creator_id'
            assignee:
              operationId: getUserByID
              parameters: 
                UserId: '$response.body#/assignee_id'
              description: >
                The `assignee_id` value returned in the response can be used as the `UserId` parameter in `GET /users/{UserId}`.
            comments:
              operationId: getCommentByIssueId
              parameters: 
                IssueId: '$response.body#/id'
              description: >
                The `id` value returned in the response can be used as the `IssueId` parameter in `GET /issues/{IssueId}/comments`.
        '204':
          description: No Content
          content: {}
        '400':
          description: Bad Request
          content: {}  
      security:
        - api_key: []
  '/issues/{IssueId}':
    get:
      tags:
        - Issue
      summary: Returns the issue with id = IssueId
      operationId: getIssuesById
      parameters:
        - name: IssueId
          in: path
          description: ID of Issue to return 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
          links:
            self:
              description: >
                The `id` value returned in the response can be used as the `IssueId` parameter in `GET /issues/{IssueId}`.
              operationId: getIssuesById
              parameters: 
                IssueId: '$response.body#/id'  
            creator:
              description: >
                The `creator_id` value returned in the response can be used as the `UserId` parameter in `GET /users/{UserId}`.
              operationId: getUserByID
              parameters: 
                UserId: '$response.body#/creator_id'
            assignee:
              operationId: getUserByID
              parameters: 
                UserId: '$response.body#/assignee_id'
              description: >
                The `assignee_id` value returned in the response can be used as the `UserId` parameter in `GET /users/{UserId}`.
            comments:
              operationId: getCommentByIssueId
              parameters: 
                IssueId: '$response.body#/id'
              description: >
                The `id` value returned in the response can be used as the `IssueId` parameter in `GET /issues/{IssueId}/comments`.
        '404':
          description: Not Found
          content: {}  
      security:
        - api_key: []
        
    delete:
      tags:
        - Issue
      summary: Deletes an issue
      operationId: deleteIssue
      parameters:
        - name: IssueId
          in: path
          description: Issue id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description:  Issue deleted
          content:
            application/json: {}
        '400':
          description: Invalid ID supplied
          content:
            application/json: {}
        '404':
          description: Issue not found
          content:
            application/json: {}
      security:
        - api_key: []
  /issues/{IssueId}/watch:
    post:
      tags:
      - Issue
      description: Watch the issue with the ID IssueId as the current
        authenticated user
      parameters:
      - name: IssueId
        in: path
        description: ID of the issue to watch
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        401:
          description: API key is missing or invalid
          content: {}
        404:
          description: Object not found
          content: {}
      security:
        - api_key: []
  /issues/{IssueId}/unwatch:
    post:
      tags:
      - Issue
      description: Unwatch the issue with the ID IssueId as the current
        authenticated user
      parameters:
      - name: IssueId
        in: path
        description: ID of the issue to unwatch
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        401:
          description: API key is missing or invalid
          content: {}
        404:
          description: Object not found
          content: {}
      security:
        - api_key: []
  /issues/{IssueId}/vote:
    post:
      tags:
      - Issue
      description:  Votes the issue with the ID IssueId as the current authenticated user
      parameters:
      - name: IssueId
        in: path
        description: ID of the issue to vote
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        401:
          description: API key is missing or invalid
          content: {}
        404:
          description: Object not found
          content: {}
      security:
        - api_key: []
  /issues/{IssueId}/unvote:
    post:
      tags:
      - Issue
      description:  Unvotes the issue with the ID IssueId as the current authenticated user
      parameters:
      - name: IssueId
        in: path
        description: ID of the issue to unvote
        required: true
        schema:
          type: integer
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        401:
          description: API key is missing or invalid
          content: {}
        404:
          description: Object not found
          content: {}
      security:
        - api_key: []
  /comments:
    get:
      tags:
        - Comment
      summary: Returns all the comments
      operationId: getComments
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
          links:
            self:
              description: >
                The `id` value returned in the response can be used as the `CommentId` parameter in `GET /comments/{CommentId}`.
              operationId: getCommentById
              parameters: 
                CommentId: '$response.body#/id'  
            reporter:
              description: >
                The `reporter_id` value returned in the response can be used as the `UserId` parameter in `GET /users/{UserId}`.
              operationId: getUserByID
              parameters: 
                UserId: '$response.body#/reporter_id'
            issue:
              description: >
                The `issue_id` value returned in the response can be used as the `IssueId` parameter in `GET /issues/{IssueId}`.
              operationId: getIssuesById
              parameters: 
                IssueId: '$response.body#/issue_id' 
      security:
        - api_key: []
  '/comments/{CommentId}':
    get:
      tags:
        - Comment
      summary: Returns the comment with id = CommentId
      operationId: getCommentById
      parameters:
        - name: CommentId
          in: path
          description: ID of Comment to return 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          links:
            self:
              description: >
                The `id` value returned in the response can be used as the `CommentId` parameter in `GET /comments/{CommentId}`.
              operationId: getCommentById
              parameters: 
                CommentId: '$response.body#/id'  
            reporter:
              description: >
                The `reporter_id` value returned in the response can be used as the `UserId` parameter in `GET /users/{UserId}`.
              operationId: getUserByID
              parameters: 
                UserId: '$response.body#/reporter_id'
            issue:
              description: >
                The `issue_id` value returned in the response can be used as the `IssueId` parameter in `GET /issues/{IssueId}`.
              operationId: getIssuesById
              parameters: 
                IssueId: '$response.body#/issue_id'
      security:
        - api_key: []
    put:
      tags:
        - Comment
      summary: Edit the comment with id = CommentId
      operationId: editCommentById
      parameters:
        - name: CommentId
          in: path
          description: ID of Comment to edit 
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updated comment object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '204':
          description:  Comment deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid ID supplied
          content: {}
      security:
        - api_key: []
    delete:
      tags:
        - Comment
      summary: Delete the comment with id = CommentId
      operationId: deleteCommentById
      parameters:
        - name: CommentId
          in: path
          description: ID of Comment to return 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description:  Comment deleted
          content: {}
        '400':
          description: Invalid ID supplied
          content: {}
  '/issues/{IssueId}/comments':
    get:
      tags:
        - Comment
      summary: Returns the comment which belongs to the issue with id = IssueId
      operationId: getCommentByIssueId
      parameters:
        - name: IssueId
          in: path
          description: ID of the issue to which the comment belongs
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
      security:
        - api_key: []
    post:
      tags:
        - Comment
      summary: Post a comment on the issue with id = IssueId
      operationId: PostCommentByIssueId
      parameters:
        - name: IssueId
          in: path
          description: ID of the issue 
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
      security:
        - api_key: []
        
  /users:
    get:
      tags:
        - User
      summary: Returns all the users
      operationId: getUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          links:
            self:
              description: >
                The `id` value returned in the response can be used as the `UserId` parameter in `GET /users/{UserId}`.
              operationId: getUserByID
              parameters: 
                UserId: '$response.body#/reporter_id'  
  '/users/{UserId}':
    get:
      tags:
        - User
      summary: Get user by user id
      operationId: getUserById
      parameters:
        - name: UserId
          in: path
          description: ID of User to return 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          links:
            self:
              description: >
                The `id` value returned in the response can be used as the `UserId` parameter in `GET /users/{UserId}`.
              operationId: getUserByID
              parameters: 
                UserId: '$response.body#/reporter_id'
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}
  '/attachments/issue/{IssueId}':
    get:
      tags:
        - Attachment
      summary: Get attachment by issue_id
      operationId: getAttachmentByIssue
      parameters:
        - name: IssueId
          in: path
          description: ID of Issue to look for the attachments 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Issue not found
          content: {}

components:
  schemas:
    Issue:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        type_issue:
          type: string
          description: Kind Issue
          default: bug
          enum:
            - bug
            - enhancement
            - proposal
            - task
        priority:
          type: string
          description: Issue Priority
          default: trivial
          enum:
            - trivial
            - minor
            - major
            - critical
            - blocker
        status:
          type: string
          description: Issue Status
          default: new
          enum:
            - new
            - closed
            - open
            - resolved
            - duplicated
            - on hold
            - invalid
            - wontfix
        votes:
          type: integer
          format: int64
        watches:
          type: integer
          format: int64
        creator_id:
          type: integer
          format: int64
        assigne_id:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        voters:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
        watchers:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
      xml:
        name: Issue
    
    
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        reporter_id:
          type: integer
          format: int64
        issue_id:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

      xml:
        name: Issue
    Attachment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        issue_id:
          type: integer
          format: int64
        file_file_name:
          type: string
        file_content_type:
          type: string
        file_file_size:
          type: integer
          format: int64
        file_updated_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      xml:
        name: Issue
    User:
      type: object
      properties:
        oauth_token:
          type: string
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        foto:
          type: string
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    api_key:
      type: apiKey
      name: token
      in: header
