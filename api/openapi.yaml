openapi: 3.0.1
info:
  title: Issue Tracker
  description: >-
    This is a swagger file to test an Issue Tracker created with ruby on rails
    by Alejandra Volkova, Daniel Esquina, Alvaro Luque and Arthur Bernal in ASW
    course in FIB
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - url: 'https://calm-scrubland-98205.herokuapp.com'
tags:
  - name: User
    description: Operations about user
  - name: Issue
    description: Everything about the issues
  - name: Comment
    description: Everything about the comments
paths:
  /issues:
    get:
      tags:
        - Issue
      summary: Returns all the issues
      operationId: getIssues
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Issue'
      security:
        - api_key: []
  '/issues/{IssueId}':
    get:
      tags:
        - Issue
      summary: Returns the issue with id = IssueId
      operationId: getIssuesById
      parameters:
        - name: IssueId
          in: path
          description: ID of Issue to return 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Issue'
      security:
        - api_key: []

  '/cambiar':
    get:
      tags:
        - 
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              default: available
              enum:
                - available
                - pending
                - sold
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
          content: {}
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /comments:
    get:
      tags:
        - Comment
      summary: Returns all the comments
      operationId: getComments
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
      security:
        - api_key: []
  '/comments/{CommentId}':
    get:
      tags:
        - Comment
      summary: Returns the comment with id = CommentId
      operationId: getCommentById
      parameters:
        - name: CommentId
          in: path
          description: ID of Comment to return 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Comment'
      security:
        - api_key: []
    put:
      tags:
        - Comment
      summary: Edit the comment with id = CommentId
      operationId: deleteCommentById
      parameters:
        - name: CommentId
          in: path
          description: ID of Comment to return 
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updated comment object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '204':
          description:  Comment deleted
          content: {}
        '400':
          description: Invalid ID supplied
          content: {}
    delete:
      tags:
        - Comment
      summary: Delete the comment with id = CommentId
      operationId: deleteCommentById
      parameters:
        - name: CommentId
          in: path
          description: ID of Comment to return 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description:  Comment deleted
          content: {}
        '400':
          description: Invalid ID supplied
          content: {}
  '/comments/issue/{IssueId}':
    get:
      tags:
        - Comment
      summary: Returns the comment which belongs to the issue with id = IssueId
      operationId: getCommentByIssueId
      parameters:
        - name: IssueId
          in: path
          description: ID of the issue to which the comment belongs
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
      security:
        - api_key: []
    post:
      tags:
        - Comment
      summary: Create a new comment on the issue with id = IssueId
      operationId: postCommentByIssueId
      parameters:
        - name: IssueId
          in: path
          description: ID of the issue to which the comment belongs
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: OK
      security:
        - api_key: []
  /users:
    get:
      tags:
        - User
      summary: Returns all the users
      operationId: getUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
        - api_key: []

  '/users/{UserId}':
    get:
      tags:
        - User
      summary: Get user by user id
      operationId: getUserById
      parameters:
        - name: UserId
          in: path
          description: ID of User to return 
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
          content: {}
        '404':
          description: User not found
          content: {}

components:
  schemas:
    
    Issue:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        type_issue:
          type: string
          description: Kind Issue
          default: bug
          enum:
            - bug
            - enhancement
            - proposal
            - task
        priority:
          type: string
          description: Issue Priority
          default: trivial
          enum:
            - trivial
            - minor
            - major
            - critical
            - blocker
        status:
          type: string
          description: Issue Status
          default: new
          enum:
            - new
            - closed
            - open
            - resolved
            - duplicated
            - on hold
            - invalid
            - wontfix
        votes:
          type: integer
          format: int64
        creator_id:
          type: integer
          format: int64
        assigne_id:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time


      xml:
        name: Issue
    
    
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        reporter_id:
          type: integer
          format: int64
        issue_id:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

      xml:
        name: Issue
    
    
    
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        provider:
          type: string
        uid:
          type: string
        oauth_token:
          type: string
        oauth_expires_at:
          type: string
          format: date-time
        foto:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
